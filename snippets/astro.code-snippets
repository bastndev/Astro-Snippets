{
    "Immediately Invoked Function Expression": {
        "prefix": "a-iife",
        "description": "Immediately invoked function expression for Astro components",
        "isFileTemplate": false,
        "body": "(()=> {\n\t${1}\n})()"
    },
    "Immediately Invoked Generator Expression": {
        "body": [
            "(function* () {\n",
            "\tfor(const ${1:item} of ${2:items}) {\n\t\t${3}\n\t}\n",
            "})()"
        ],
        "prefix": "a-iige",
        "description": "Immediately invoked generator expression"
    },
    "Astro Base Component": {
        "prefix": "a-base",
        "description": "Basic scaffold for an Astro component",
        "isFileTemplate": true,
        "body": [
            "---\n${1}\n---",
            "",
            "<${2:div}>",
            "\t${3}",
            "</${2:div}>",
            "",
            "<style>",
            "\t${4}",
            "</style>"
        ]
    },
    "Astro Component with Client Script": {
        "prefix": "a-cbase",
        "description": "Astro component with client-side script",
        "isFileTemplate": true,
        "body": [
            "---\n${1}\n---",
            "",
            "<${2:div}>",
            "\t${3}",
            "</${2:div}>",
            "",
            "<style>",
            "\t${4}",
            "</style>",
            "",
            "<script>",
            "\t${5}",
            "</script>"
        ]
    },
    "Full HTML Layout": {
        "prefix": "a-layout-full",
        "description": "Complete HTML layout with header, main, and footer",
        "isFileTemplate": true,
        "body": [
            "---",
            "export interface Props {",
            "\ttitle: string;",
            "\tdescription?: string;",
            "}",
            "",
            "const { title, description = '' } = Astro.props;",
            "---",
            "",
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "\t<head>",
            "\t\t<meta charset=\"UTF-8\" />",
            "\t\t<meta name=\"description\" content={description} />",
            "\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
            "\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />",
            "\t\t<title>{title}</title>",
            "\t</head>",
            "\t<body>",
            "\t\t<header>",
            "\t\t\t<slot name=\"header\" />",
            "\t\t</header>",
            "\t\t<main>",
            "\t\t\t<slot />",
            "\t\t</main>",
            "\t\t<footer>",
            "\t\t\t<slot name=\"footer\" />",
            "\t\t</footer>",
            "\t</body>",
            "</html>",
            "",
            "<style>",
            "\t${1}",
            "</style>"
        ]
    },
    "Fragment with Set HTML": {
        "prefix": "a-frag-html",
        "description": "Fragment component with set:html directive",
        "isFileTemplate": false,
        "body": "<Fragment set:html={${1}} />"
    },
    "Fragment with Named Slot": {
        "prefix": "a-frag-slot",
        "description": "Fragment component with named slot",
        "isFileTemplate": false,
        "body": [
            "<Fragment slot=\"${1:name}\">",
            "\t${2}",
            "</Fragment>"
        ]
    },
    "Pre-rendered Page": {
        "prefix": "a-prerender",
        "description": "Pre-rendered page with export const prerender",
        "isFileTemplate": true,
        "body": [
            "---",
            "export const prerender = true;",
            "",
            "${1}",
            "---",
            "",
            "<${2:div}>",
            "\t${3}",
            "</${2:div}>",
            "",
            "<style>",
            "\t${4}",
            "</style>"
        ]
    },
    "Static Paths with Pre-rendering": {
        "prefix": "a-static-paths",
        "description": "Pre-rendered page with getStaticPaths function",
        "isFileTemplate": true,
        "body": [
            "---",
            "import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from 'astro';",
            "",
            "export const prerender = true;",
            "",
            "export const getStaticPaths = (async () => {",
            "\t${1:// Fetch data here}",
            "\treturn [",
            "\t\t{",
            "\t\t\tparams: { ${2:slug}: '${3:example}' },",
            "\t\t\tprops: { ${4:data}: ${5:{}} }",
            "\t\t}",
            "\t];",
            "}) satisfies GetStaticPaths;",
            "",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>;",
            "const { ${6} } = Astro.props;",
            "---",
            "",
            "<${7:div}>",
            "\t${8}",
            "</${7:div}>"
        ]
    },
    "Dynamic Page with getStaticPaths": {
        "prefix": "a-dynamic-page",
        "description": "Dynamic page with getStaticPaths for SSG",
        "isFileTemplate": true,
        "body": [
            "---",
            "import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';",
            "",
            "export const getStaticPaths = (async () => {",
            "\t${1:// Fetch your data}",
            "\treturn [",
            "\t\t{",
            "\t\t\tparams: { ${2:slug}: '${3:value}' },",
            "\t\t\tprops: { ${4:title}: '${5:Title}' }",
            "\t\t}",
            "\t];",
            "}) satisfies GetStaticPaths;",
            "",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>;",
            "const { ${6} } = Astro.props;",
            "---",
            "",
            "<${7:div}>",
            "\t${8}",
            "</${7:div}>"
        ]
    },
    "Typed Astro Component": {
        "prefix": "a-component",
        "description": "Astro component with TypeScript props interface",
        "isFileTemplate": true,
        "body": [
            "---",
            "export interface Props {",
            "\t${1:title}: ${2:string};",
            "\t${3:className}?: ${4:string};",
            "}",
            "",
            "const { ${5} } = Astro.props;",
            "---",
            "",
            "<${6:div} class={${7:className}}>",
            "\t${8}",
            "</${6:div}>",
            "",
            "<style>",
            "\t${9}",
            "</style>"
        ]
    },
    "Astro Component with Client Script and Props": {
        "prefix": "a-component-client",
        "description": "Astro component with typed props and client script",
        "isFileTemplate": true,
        "body": [
            "---",
            "export interface Props {",
            "\t${1:title}: ${2:string};",
            "\t${3:className}?: ${4:string};",
            "}",
            "",
            "const { ${5} } = Astro.props;",
            "---",
            "",
            "<${6:div} class={${7:className}}>",
            "\t${8}",
            "</${6:div}>",
            "",
            "<style>",
            "\t${9}",
            "</style>",
            "",
            "<script>",
            "\t${10}",
            "</script>"
        ]
    },
    "Layout Component": {
        "prefix": "a-layout",
        "description": "Basic layout component with slots",
        "isFileTemplate": true,
        "body": [
            "---",
            "export interface Props {",
            "\ttitle: string;",
            "\tdescription?: string;",
            "\t${1}",
            "}",
            "",
            "const { title, description, ${2} } = Astro.props;",
            "---",
            "",
            "<${3:Layout}>",
            "\t<slot name=\"header\">",
            "\t\t${4}",
            "\t</slot>",
            "\t<slot />",
            "\t<slot name=\"footer\">",
            "\t\t${5}",
            "\t</slot>",
            "</${3:Layout}>",
            "",
            "<style>",
            "\t${6}",
            "</style>"
        ]
    },
    "Content Collection Page": {
        "prefix": "a-content-collection",
        "description": "Page using Astro Content Collections with getStaticPaths",
        "isFileTemplate": true,
        "body": [
            "---",
            "import { getCollection, type CollectionEntry } from 'astro:content';",
            "import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';",
            "",
            "export const getStaticPaths = (async () => {",
            "\tconst ${1:posts} = await getCollection('${2:blog}');",
            "\treturn ${1:posts}.map((entry) => ({",
            "\t\tparams: { slug: entry.slug },",
            "\t\tprops: { entry }",
            "\t}));",
            "}) satisfies GetStaticPaths;",
            "",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>;",
            "const { entry } = Astro.props;",
            "const { Content } = await entry.render();",
            "const { title, ${3:description} } = entry.data;",
            "---",
            "",
            "<article>",
            "\t<h1>{title}</h1>",
            "\t<Content />",
            "</article>",
            "",
            "<style>",
            "\t${4}",
            "</style>"
        ]
    },
    "Map Expression": {
        "prefix": "a-map",
        "description": "Simple map expression for rendering lists",
        "isFileTemplate": false,
        "body": "{ ${1:items}.map((${2:item}) => ${3:item}) }"
    },
    "Map Expression with Block": {
        "prefix": "a-map-block",
        "description": "Map expression using block syntax with return statement",
        "isFileTemplate": false,
        "body": [
            "{",
            "\t${1:items}.map((${2:item}) => {",
            "\t\treturn ${3:item};",
            "\t})",
            "}"
        ]
    },
    "Conditional Rendering": {
        "prefix": "a-conditional",
        "description": "Conditional rendering with ternary operator",
        "isFileTemplate": false,
        "body": "{ ${1:condition} ? ${2:trueValue} : ${3:falseValue} }"
    },
    "Conditional Block": {
        "prefix": "a-if",
        "description": "Conditional rendering with block syntax",
        "isFileTemplate": false,
        "body": [
            "{ ${1:condition} && (",
            "\t${2}",
            ") }"
        ]
    },
    "Named Slot": {
        "prefix": "a-slot",
        "description": "Named slot with fallback content",
        "isFileTemplate": false,
        "body": [
            "<slot name=\"${1:name}\">",
            "\t${2:fallback content}",
            "</slot>"
        ]
    },
    "API Route": {
        "prefix": "a-api",
        "description": "Astro API endpoint",
        "isFileTemplate": true,
        "body": [
            "import type { APIRoute } from 'astro';",
            "",
            "export const GET: APIRoute = async ({ params, request }) => {",
            "\t${1:// Your API logic here}",
            "\treturn new Response(JSON.stringify({ ${2:message}: '${3:Hello}' }), {",
            "\t\tstatus: 200,",
            "\t\theaders: {",
            "\t\t\t'Content-Type': 'application/json'",
            "\t\t}",
            "\t});",
            "};"
        ]
    },
    "POST API Route": {
        "prefix": "a-api-post",
        "description": "POST API endpoint",
        "isFileTemplate": true,
        "body": [
            "import type { APIRoute } from 'astro';",
            "",
            "export const POST: APIRoute = async ({ request }) => {",
            "\tconst data = await request.json();",
            "\t${1:// Process the data}",
            "\treturn new Response(JSON.stringify({ ${2:success}: true }), {",
            "\t\tstatus: 200,",
            "\t\theaders: {",
            "\t\t\t'Content-Type': 'application/json'",
            "\t\t}",
            "\t});",
            "};"
        ]
    },
    "Middleware": {
        "prefix": "a-middleware",
        "description": "Astro middleware function",
        "isFileTemplate": true,
        "body": [
            "import type { MiddlewareHandler } from 'astro';",
            "",
            "export const onRequest: MiddlewareHandler = async (context, next) => {",
            "\t${1:// Middleware logic before request}",
            "\tconst response = await next();",
            "\t${2:// Middleware logic after request}",
            "\treturn response;",
            "};"
        ]
    },
    "View Transitions": {
        "prefix": "a-transitions",
        "description": "Add view transitions to layout",
        "isFileTemplate": false,
        "body": [
            "import { ViewTransitions } from 'astro:transitions';",
            "",
            "<head>",
            "\t${1}",
            "\t<ViewTransitions />",
            "</head>"
        ]
    },
    "Transition Name": {
        "prefix": "a-transition-name",
        "description": "Add transition name to element",
        "isFileTemplate": false,
        "body": "transition:name=\"${1:unique-name}\""
    },
    "Image Component": {
        "prefix": "a-image",
        "description": "Optimized Image component",
        "isFileTemplate": false,
        "body": [
            "import { Image } from 'astro:assets';",
            "",
            "<Image",
            "\tsrc={${1:imageUrl}}",
            "\talt=\"${2:alt text}\"",
            "\twidth={${3:800}}",
            "\theight={${4:600}}",
            "/>"
        ]
    },
    "Picture Component": {
        "prefix": "a-picture",
        "description": "Responsive Picture component",
        "isFileTemplate": false,
        "body": [
            "import { Picture } from 'astro:assets';",
            "",
            "<Picture",
            "\tsrc={${1:imageUrl}}",
            "\talt=\"${2:alt text}\"",
            "\twidths={[${3:400, 800, 1200}]}",
            "\tsizes=\"${4:(max-width: 800px) 100vw, 800px}\"",
            "/>"
        ]
    },
    "Head Component": {
        "prefix": "a-head",
        "description": "SEO-optimized head component",
        "isFileTemplate": false,
        "body": [
            "<head>",
            "\t<meta charset=\"utf-8\" />",
            "\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />",
            "\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
            "\t<meta name=\"generator\" content={Astro.generator} />",
            "\t<title>${1:Page Title}</title>",
            "\t<meta name=\"description\" content=\"${2:Page description}\" />",
            "</head>"
        ]
    },
    "Content Collection Schema": {
        "prefix": "a-collection-schema",
        "description": "Content collection schema definition",
        "isFileTemplate": true,
        "body": [
            "import { defineCollection, z } from 'astro:content';",
            "",
            "const ${1:blog} = defineCollection({",
            "\ttype: '${2:content}',",
            "\tschema: z.object({",
            "\t\ttitle: z.string(),",
            "\t\tdescription: z.string().optional(),",
            "\t\tpubDate: z.date(),",
            "\t\tupdatedDate: z.date().optional(),",
            "\t\t${3}",
            "\t}),",
            "});",
            "",
            "export const collections = {",
            "\t${1:blog},",
            "};"
        ]
    }
}